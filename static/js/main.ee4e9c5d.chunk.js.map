{"version":3,"sources":["api/index.js","Chart.jsx","Countries.jsx","App.js","index.js"],"names":["url","virusData","country","a","dynamicUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","virusDailyData","returnedData","map","dailyData","total","date","reportDate","countriesName","countries","name","Chart","useState","setDailyData","useEffect","fetchDailyData","globalChart","labels","datasets","label","borderColor","backgroundColor","fill","barChart","value","options","legend","display","title","text","css","width","Option","Select","Countries","handleCountryChange","fetchedCountries","setFetchCountriesList","fetchCountriesList","style","margin","defaultValue","onChange","dropdownStyle","i","key","Text","Typography","App","setData","setCountry","fetchData","styles","alignItems","justifyContent","flexDirection","color","className","marginTop","fontSize","textAlign","reactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee4e9c5d.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\n\n//dealing with promises with async / await\nexport const virusData = async (country) => {\n    let dynamicUrl = url;\n\n    if (country) {\n        dynamicUrl = `${url}/countries/${country}`\n    }\n    try {\n        //destructure the data object with info needed\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(dynamicUrl)\n        //object with only the info needed from data\n        return { confirmed, recovered, deaths, lastUpdate }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const virusDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n        //return an object for each instance\n        const returnedData = data.map(dailyData => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n        return returnedData\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const countriesName = async () => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`)\n        return countries.map((country) => country.name)\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {virusDailyData} from './api'\nimport { Line, Bar } from 'react-chartjs-2';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country})  => {\n\n  // data for global chart\n    const [dailyData, setDailyData] = useState([])\n    \n    useEffect(() => {\n        const fetchDailyData = async () => {\n            setDailyData(await virusDailyData())\n        }\n        fetchDailyData()\n    }, [])\n\n    // two different charts\n    const globalChart = (\n       \n        dailyData ? \n        (<Line \n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                  data:  dailyData.map(({ confirmed }) => confirmed),\n                  label: 'Infected',\n                  borderColor: '#f6a5c0',\n                  backgroundColor: '#f6a5c0',\n                  fill: true,\n                }, {\n                  data:  dailyData.map(({ deaths }) => deaths),\n                  label: 'Deaths',\n                  borderColor: '#c2185b',\n                  backgroundColor: '#c2185b',\n                  fill: true,\n                }],\n              }} />) : null\n    )\n  \n    const barChart = (\n      confirmed ?\n      (\n        <Bar data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: ['#f48fb1',\n              '#f6a5c0',\n              '#c3185d'], \n              data: [confirmed.value, recovered.value, deaths.value]\n          }]\n        }} \n  \n        options={{\n          legend: {display: false},\n          title: {display: true, text: `Latest update for ${country}`}\n        }} />\n      )\n     : null )\n  \n    return (\n    <div css={{width: '80%'}} >{country ? barChart : globalChart}</div>\n    )\n}\n\nexport default Chart","import React, {useState, useEffect} from 'react';\nimport { Form, Select } from 'antd';\nimport {countriesName} from './api'\n\nconst { Option } = Select;\n\nconst Countries = ({ handleCountryChange }) => {\n\nconst[fetchedCountries, setFetchCountriesList] = useState([])\n\nuseEffect(() => {\n    const fetchCountriesList = async () => {\n        setFetchCountriesList(await countriesName())\n    }\n    fetchCountriesList()\n}, [setFetchCountriesList])\n// console.log(fetchedCountries)\n//will re render when set fetched countries changes which enables the ability to pick different countries\n    return (\n        <div>\n            <Form style={{margin: '2rem'}}>\n                <Select defaultValue='Global Data' onChange={value => handleCountryChange(value)} dropdownStyle={{backgroundColor: '#bdbdbd'}} >\n                   \n                    {fetchedCountries.map((country, i) =>  <Option key={i} value={country}>{country}</Option>)}\n                </Select>\n            </Form>\n            </div>\n    )\n}\n\nexport default Countries","import React, { useEffect, useState } from 'react';\nimport \"antd/dist/antd.css\";\nimport Chart from './Chart'\nimport Countries from './Countries'\nimport { Global } from '@emotion/core'\nimport { virusData } from './api'\nimport { Typography } from 'antd';\nconst { Text } = Typography;\n\nconst App = () => {\n\n    const [data, setData] = useState({})\n    const [country, setCountry] = useState('')\n    // const [country, setCountry] = useState('')\n\n    useEffect(() => {\n        //await because we are calling async func\n        async function fetchData() {\n            setData(await virusData())\n\n        }\n        fetchData()\n    }, [])\n\n    const handleCountryChange = async (country) => {\n        setData(await virusData(country))\n        setCountry(country)\n    }\n    \n    return (\n        <>\n            <Global\n                styles={{\n                    'body': {\n                        backgroundColor: '#212121'\n                    },\n                    '.container': {\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexDirection: 'column',\n                        color: 'white'\n                    }\n                }}\n            />\n\n            <div className='container'>\n                <Text style={{marginTop: '1rem', color: '#d4d4d4', fontSize: '2rem', textAlign: 'center'}}>COVID-19 LATEST UPDATE</Text>\n                <Countries handleCountryChange={handleCountryChange} />\n                <Chart data={data} country={country}  />\n            </div>\n        </>\n    )\n}\n\nexport default App","import React from 'react';\nimport reactDOM from 'react-dom'\nimport App from './App'\n\nreactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}